server:
  port: 8086
spring:
  redis:
    client-type: jedis
    host: 39.106.226.156
    password: xdclass.net
    port: 6379
    jedis:
      pool:
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: 100
        # 连接池中的最大空闲连接
        max-idle: 100
        # 连接池中的最小空闲连接
        min-idle: 100
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: 60000


  shardingsphere:
    datasource:
      #数据源名称
      names: ds0
      ds0:
        connectionTimeoutMilliseconds: 30000
        driver-class-name: com.mysql.cj.jdbc.Driver
        idleTimeoutMilliseconds: 60000
#        jdbc-url: jdbc:mysql://192.168.3.157:3306/xbd_link?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
        jdbc-url: jdbc:mysql://39.106.226.156:3306/xdxlass?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
        maintenanceIntervalMilliseconds: 30000
        maxLifetimeMilliseconds: 1800000
        maxPoolSize: 50
        minPoolSize: 50
#        password: wssmysql
        password: xdxxmysql
        type: com.zaxxer.hikari.HikariDataSource
        username: root
#        username: wss
      props:
        # 打印执行的数据库以及语句
        sql:
          show: true

        sharding:
          tables:
            traffic:
              # 指定traffic表的数据分布情况，配置数据节点,行表达式标识符使用 ${...} 或 $->{...}，但前者与 Spring 本身的文件占位符冲突，所以在 Spring 环境中建议使用 $->{...}
              actual-data-nodes: ds0.traffic_$->{0..1}
              #水平分表策略+行表达式分片
              table-strategy:
                inline:
                  algorithm-expression: traffic_$->{ account_no % 2 }
                  sharding-column: account_no
              #id生成策略
              key-generator:
                column: id
                props:
                  worker:
                    id: ${workId}
                #id生成策略
                type: SNOWFLAKE


link:
  token: 555




